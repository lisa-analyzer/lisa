checkstyle {
    configFile = file(new File(rootProject.projectDir, 'checkstyle-config.xml'))
    sourceSets = []
    showViolations = true
    toolVersion '8.38' 
}

checkstyleTest.enabled = false

checkstyleMain {
    finalizedBy 'checkstyleErrorMessage'
    reports {
        xml.required = false
        html.required = false
    }
}

task checkstyleErrorMessage {
    onlyIf {
        checkstyleMain.state.failure != null
    }
    doLast {
        logger.error('Checkstyle plugin thrown an error. This means that the javadoc is not correctly setup. Inspect console output to find problematic javadocs.')
        logger.error('To reproduce locally, execute \'./gradlew checkstyleMain\'')
    }
}

spotless {
    enforceCheck = false
    encoding 'UTF-8'
    lineEndings 'UNIX'
    java {
        // tabs, no spaces
        indentWithTabs()
    
        // keep imports clean 
        importOrder() 
        removeUnusedImports()
    
        // use the eclipse formatting with the one provided with the project
        eclipse().configFile(new File(rootProject.projectDir, 'spotless-formatting.xml'))

		target 'src/**/*.java'    
        // ignore generated code
        targetExclude '**/build/generated/**/*.java'
        targetExclude '**/build/generated-src/**/*.java'
        targetExclude '**/target/generated-sources/**/*.java'
        targetExclude '**/VersionInfo.java'
    }
    antlr4 {
        target 'src/*/antlr/**/*.g4'
        antlr4Formatter() 
    }
}

spotlessJava {
	// declaring explicit dependencies
	dependsOn 'compileJava', 'compileTestJava', 'processTestResources', 'spotlessAntlr4'
}

spotlessJavaCheck { 
    finalizedBy 'spotlessErrorMessage'
}

spotlessAntlr4Check { 
    finalizedBy 'spotlessErrorMessage'
}

task spotlessErrorMessage {
    onlyIf {
        spotlessJavaCheck.state.failure != null || spotlessAntlr4Check.state.failure != null
    }
    doLast {
        logger.error('Spotless plugin thrown an error. This means that the code is not correctly formatted.')
        logger.error('To reproduce locally, execute \'./gradlew spotlessCheck\'')
        logger.error('To automatically fix all the problems, execute \'./gradlew spotlessApply\'')
    }
}

tasks.register('checkCodeStyle') {
    group = 'verification'
    description = 'Execute spotless and checkstyle to ensure code and javadoc formatting'
    dependsOn 'spotlessCheck', 'checkstyleMain', 'checkstyleTest'
}
