digraph {
	labelloc="t";
	label="untyped A::getPositive(A* this, untyped i)";
	"node0" [shape="rect",color="black",label=<&lt;=(i, 0)<BR/><BR/>{ expressions: [i &lt;= 0],<BR/>state: { heap: monolith,<BR/>type: { ['imp-testcases/visualization/program.imp':30:42]:call_ret_value@'imp-testcases/visualization/program.imp':30:41: [int32],<BR/>i: [int32],<BR/>this: [A*] },<BR/>value: { ['imp-testcases/visualization/program.imp':30:42]:call_ret_value@'imp-testcases/visualization/program.imp':30:41: [1, 1],<BR/>i: [1, 1] }<BR/> }<BR/> }<BR/>>];
	"node3" [shape="rect",color="gray",label=<i = 1<BR/><BR/>{ expressions: [i],<BR/>state: { heap: monolith,<BR/>type: _|_,<BR/>value: _|_ }<BR/> }<BR/>>];
	"node6" [shape="rect",color="gray",label=<i = 10<BR/><BR/>{ expressions: [i],<BR/>state: { heap: monolith,<BR/>type: { ['imp-testcases/visualization/program.imp':30:42]:call_ret_value@'imp-testcases/visualization/program.imp':30:41: [int32],<BR/>i: [int32],<BR/>this: [A*] },<BR/>value: { ['imp-testcases/visualization/program.imp':30:42]:call_ret_value@'imp-testcases/visualization/program.imp':30:41: [1, 1],<BR/>i: [10, 10] }<BR/> }<BR/> }<BR/>>];
	"node9" [shape="rect",color="black",peripheries="2",label=<return i<BR/><BR/>{ expressions: [ret_value@getPositive],<BR/>state: { heap: monolith,<BR/>type: { ['imp-testcases/visualization/program.imp':30:42]:call_ret_value@'imp-testcases/visualization/program.imp':30:41: [int32],<BR/>i: [int32],<BR/>ret_value@getPositive: [int32],<BR/>this: [A*] },<BR/>value: { ['imp-testcases/visualization/program.imp':30:42]:call_ret_value@'imp-testcases/visualization/program.imp':30:41: [1, 1],<BR/>i: [10, 10],<BR/>ret_value@getPositive: [10, 10] }<BR/> }<BR/> }<BR/>>];
	"node0" -> "node3" [color="blue",style="dashed"];
	"node0" -> "node6" [color="red",style="dashed"];
	"node3" -> "node9" [color="black"];
	"node6" -> "node9" [color="black"];
subgraph cluster_legend {
	label="Legend";
	style=dotted;
	node [shape=plaintext];
	"legend" [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0"><tr><td align="right">node border&nbsp;</td><td align="left"><font color="gray">gray</font>, single</td></tr><tr><td align="right">entrypoint border&nbsp;</td><td align="left"><font color="black">black</font>, single</td></tr><tr><td align="right">exitpoint border&nbsp;</td><td align="left"><font color="black">black</font>, double</td></tr><tr><td align="right">sequential edge&nbsp;</td><td align="left"><font color="black">black</font>, solid</td></tr><tr><td align="right">true edge&nbsp;</td><td align="left"><font color="blue">blue</font>, dashed</td></tr><tr><td align="right">false edge&nbsp;</td><td align="left"><font color="red">red</font>, dashed</td></tr></table>>];
}

}
